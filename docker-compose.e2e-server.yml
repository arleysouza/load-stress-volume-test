services:
  postgres-e2e:
    image: postgres:17-alpine
    container_name: postgres-e2e
    restart: on-failure:5
    env_file:
      - ./.env.e2e.server
    tmpfs:
      - /var/lib/postgresql/data
    volumes:
       - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - e2e-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 5s

  redis-e2e:
    image: redis:8-alpine
    container_name: redis-e2e
    restart: on-failure:5
    command: ["sh", "-c", "exec redis-server --requirepass \"$$REDIS_PASSWORD\""]
    env_file:
      - ./.env.e2e.server
    networks:
      - e2e-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$REDIS_PASSWORD", "ping"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 2s

  node-e2e:
    build:
      context: ./server
      dockerfile: Dockerfile.e2e.server
    container_name: node-e2e
    restart: on-failure:5
    env_file:
      - ./.env.e2e.server
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
    networks:
      - e2e-network               
    command: sh -c "node dist/index.js"

  node-e2e-test:
    build:
      context: ./server
      dockerfile: Dockerfile.e2e.server
    container_name: node-e2e-test
    env_file:
      - ./.env.e2e.server
    depends_on:
      node-e2e:
        condition: service_started
    networks:
      - e2e-network
    volumes:
      - ./server/coverage:/app/coverage
    command: sh -c "npx wait-on tcp:postgres-e2e:5432 tcp:redis-e2e:6379 http://node-e2e:3000/health && npm run test:e2e"

networks:
  e2e-network:
    driver: bridge
