services:
  postgres-e2e-front:
    image: postgres:17-alpine
    container_name: postgres-e2e-front
    restart: on-failure:5
    env_file:
      - ./.env.e2e.front
    tmpfs:
      - /var/lib/postgresql/data
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - e2e-front-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 5s

  redis-e2e-front:
    image: redis:8-alpine
    container_name: redis-e2e-front
    restart: on-failure:5
    command: ["sh", "-c", "exec redis-server --requirepass \"$$REDIS_PASSWORD\""]
    env_file:
      - ./.env.e2e.front
    networks:
      - e2e-front-network
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$REDIS_PASSWORD", "ping"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 2s

  node-e2e-front:
    build:
      context: ./server
      dockerfile: Dockerfile.e2e.front
    container_name: node-e2e-front
    restart: on-failure:5
    env_file:
      - ./.env.e2e.front
    networks:
      - e2e-front-network
    depends_on:
      - postgres-e2e-front
      - redis-e2e-front
    command: sh -c "node dist/index.js"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 15
      start_period: 10s

  front-e2e-front:
    build:
      context: ./front
      dockerfile: Dockerfile.e2e.front
    container_name: front-e2e-front
    restart: on-failure:5
    env_file:
      - ./.env.e2e.front
    ports:
      - "${FRONT_HOST_PORT}:80"
    networks:
      - e2e-front-network
    depends_on:
      node-e2e-front:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:80/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  front-e2e-test:
    build:
      context: ./front
      dockerfile: Dockerfile.e2e.front
      target: tests   # escolhe o est√°gio certo
    container_name: front-e2e-test
    env_file:
      - ./.env.e2e.front
    networks:
      - e2e-front-network
    depends_on:
      front-e2e-front:
        condition: service_healthy
    command: ["npx", "playwright", "test", "--reporter=line", "--reporter=html"]
    volumes:
      - ./front/playwright-report:/usr/src/app/playwright-report
      - ./front/test-results:/usr/src/app/test-results

networks:
  e2e-front-network:
    driver: bridge
